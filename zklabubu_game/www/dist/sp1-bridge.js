const SP1Bridge={generateProof:async function(o){console.log("SP1Bridge: Proof generation started",o);const e=window.location.hostname.includes("vercel.app")||"true"===localStorage.getItem("forceSimulation");"function"==typeof window.logToProofPanel?(window.logToProofPanel("Starting SP1 Compressed Proof system..."),e&&(window.logToProofPanel("Using Vercel environment/simulation mode."),window.logToProofPanel("Note: Real SP1 compressed proofs only work in local environment.")),window.logToProofPanel(`Score: ${o.score}, Yellow Eggs: ${o.yellowEggs}, Blue Eggs: ${o.blueEggs}, Purple Eggs: ${o.purpleEggs}`),window.logToProofPanel("Running SP1 ZK program (Compressed mode)...")):console.warn("logToProofPanel function not found, log messages will be written to console");try{if(e)return this.simulateProofProcess(o);const n=await this.generateRealProof(o);return n.success?n:("function"==typeof window.logToProofPanel&&window.logToProofPanel("Switching to simulation mode..."),this.simulateProofProcess(o))}catch(e){return console.error("Real proof generation error:",e),"function"==typeof window.logToProofPanel&&(window.logToProofPanel(`Error: ${e.message}`),window.logToProofPanel("Switching to simulation mode...")),this.simulateProofProcess(o)}},generateRealProof:async function(o){"function"==typeof window.logToProofPanel&&window.logToProofPanel("Connecting to SP1 backend...");try{const e=await fetch("http://localhost:3000/api/generate-proof",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!e.ok)throw new Error(`API error: ${e.status}`);const n=await e.json();console.log("Result from API:",n),"function"==typeof window.logToProofPanel&&(window.logToProofPanel("SP1 Compressed Proof successfully generated!"),window.logToProofPanel(`Proof Type: ${n.proofType||"Compressed (SP1ReduceReceipt)"}`),window.logToProofPanel(`Proof Hash: ${n.proofHash}`),n.scoreIsValid?window.logToProofPanel("Score verification: SUCCESS"):window.logToProofPanel("Score verification: FAILED. Reported score could not be verified!"));try{this.createVisualProofResult(o,n.proofHash,n.scoreIsValid)}catch(o){console.error("Error creating visual result:",o),"function"==typeof window.logToProofPanel&&window.logToProofPanel(`Visual result creation error: ${o.message}`)}try{"function"==typeof window.showProofResult&&window.showProofResult(n.scoreIsValid,n.proofHash);const e=document.getElementById("proof-result"),t=document.getElementById("share-proof-btn");e&&t&&(e.style.display="block",t.style.display="block",e.innerHTML=`\n                        <div style="text-align: center; margin-bottom: 10px;">\n                            <span style="font-size: 24px; color: ${n.scoreIsValid?"#00ff00":"#ff0000"};">\n                                ${n.scoreIsValid?"‚úÖ":"‚ùå"}\n                            </span>\n                            <span style="font-weight: bold; font-size: 18px; margin-left: 10px;">\n                                Proof ${n.scoreIsValid?"Verified Successfully!":"Verification Failed!"}\n                            </span>\n                        </div>\n                        <div style="font-size: 14px; text-align: center; margin-bottom: 10px;">\n                            <strong>üîê Proof Hash:</strong> ${n.proofHash}\n                        </div>\n                        <div style="font-size: 14px; text-align: center;">\n                            <strong>üìä Score:</strong> ${o.score} points | \n                            <strong>ü•ö Eggs:</strong> üü°${o.yellowEggs} üîµ${o.blueEggs} üü£${o.purpleEggs}\n                        </div>\n                    `)}catch(o){console.error("Error showing result:",o)}return n}catch(o){throw console.error("API call failed:",o),"function"==typeof window.logToProofPanel&&window.logToProofPanel(`API Error: ${o.message}`),o}},simulateProofProcess:function(o){const e=5*o.yellowEggs+10*o.blueEggs+20*o.purpleEggs,n=e===o.score,t=[{message:"Loading SP1 RISC-V program...",delay:500},{message:"Preparing zkLabubuio game data for verification...",delay:500},{message:`Input values: Yellow=${o.yellowEggs}, Blue=${o.blueEggs}, Purple=${o.purpleEggs}, Score=${o.score}`,delay:1e3},{message:"Verifying game rules...",delay:800},{message:`Score calculation: (Yellow*5)+(Blue*10)+(Purple*20) = ${e}`,delay:1200},{message:"Score verification: "+(n?"SUCCESS":"FAILED!"),delay:1e3},{message:"Creating SP1 ZK circuit...",delay:1e3},{message:"Generating standard proof...",delay:1200},{message:"Compressing proof with recursive circuit...",delay:1500},{message:"Finalizing compressed proof...",delay:1200},{message:"Verifying compressed proof...",delay:1e3},{message:"Compressed proof successfully generated and verified! (SIMULATION)",delay:800}];let r=0;const i=()=>{r<t.length?("function"==typeof window.logToProofPanel&&window.logToProofPanel(t[r].message),setTimeout((()=>{r++,i()}),t[r].delay)):this.completeProof(o,n)};return i(),{success:!0,simulation:!0,calculatedScore:e,scoreIsValid:n}},completeProof:function(o,e){const n=this.generateProofHash(o);"function"==typeof window.logToProofPanel&&(window.logToProofPanel("=== PROOF RESULT ==="),window.logToProofPanel(`Hash: ${n}`),window.logToProofPanel("Verification: "+(e?"SUCCESS":"FAILED")),window.logToProofPanel("===================")),this.createVisualProofResult(o,n,e),"function"==typeof window.showProofResult&&window.showProofResult(e,n);const t=document.getElementById("proof-result"),r=document.getElementById("share-proof-btn");t&&r&&(t.style.display="block",r.style.display="block",t.innerHTML=`\n                <div style="text-align: center; margin-bottom: 10px;">\n                    <span style="font-size: 24px; color: ${e?"#00ff00":"#ff0000"};">\n                        ${e?"‚úÖ":"‚ùå"}\n                    </span>\n                    <span style="font-weight: bold; font-size: 18px; margin-left: 10px;">\n                        Proof ${e?"Verified Successfully!":"Verification Failed!"} (Simulation)\n                    </span>\n                </div>\n                <div style="font-size: 14px; text-align: center; margin-bottom: 10px;">\n                    <strong>üîê Proof Hash:</strong> ${n}\n                </div>\n                <div style="font-size: 14px; text-align: center;">\n                    <strong>üìä Score:</strong> ${o.score} points | \n                    <strong>ü•ö Eggs:</strong> üü°${o.yellowEggs} üîµ${o.blueEggs} üü£${o.purpleEggs}\n                </div>\n            `)},createVisualProofResult:function(o,e,n){const t=document.createElement("div");t.id="proof-result",t.style.marginTop="15px",t.style.padding="12px",t.style.backgroundColor="rgba(20, 20, 35, 0.9)",t.style.borderRadius="8px",t.style.border=n?"1px solid #2ecc71":"1px solid #e74c3c",t.style.boxShadow="0 4px 8px rgba(0, 0, 0, 0.2)",t.style.fontSize="13px";const r=5*o.yellowEggs+10*o.blueEggs+20*o.purpleEggs,i=document.getElementById("proof-log");if(i){const s=`\n                <div style="text-align: center; margin-bottom: 8px;">\n                    <span style="font-size: 18px; color: ${n?"#2ecc71":"#e74c3c"}; display: inline-block; margin-right: 6px;">\n                        ${n?"‚úì":"‚úó"}\n                    </span>\n                    <span style="font-weight: bold; font-size: 16px; color: ${n?"#2ecc71":"#e74c3c"};">\n                        Proof ${n?"Verified!":"Failed!"}\n                    </span>\n                </div>\n                \n                <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">\n                    <div style="flex: 1; background-color: rgba(52, 152, 219, 0.1); padding: 6px; border-radius: 4px; margin-right: 4px;">\n                        <div style="font-weight: bold; color: #3498db; font-size: 12px;">Reported</div>\n                        <div style="font-size: 14px;">${o.score}</div>\n                    </div>\n                    <div style="flex: 1; background-color: rgba(46, 204, 113, 0.1); padding: 6px; border-radius: 4px; margin-left: 4px;">\n                        <div style="font-weight: bold; color: #2ecc71; font-size: 12px;">Calculated</div>\n                        <div style="font-size: 14px;">${r} ${n?"":'<span style="color:#e74c3c; font-size: 11px;">(Mismatch!)</span>'}</div>\n                    </div>\n                </div>\n                \n                <div style="background-color: rgba(241, 196, 15, 0.1); padding: 6px; border-radius: 4px; margin-bottom: 8px;">\n                    <div style="font-weight: bold; color: #f1c40f; font-size: 12px; margin-bottom: 4px;">Eggs Collected</div>\n                    <div style="display: flex; justify-content: space-between; text-align: center; font-size: 12px;">\n                        <div style="flex: 1;">\n                            <div>üü° ${o.yellowEggs} √ó 5</div>\n                            <div>${5*o.yellowEggs}</div>\n                        </div>\n                        <div style="flex: 1;">\n                            <div>üîµ ${o.blueEggs} √ó 10</div>\n                            <div>${10*o.blueEggs}</div>\n                        </div>\n                        <div style="flex: 1;">\n                            <div>üü£ ${o.purpleEggs} √ó 20</div>\n                            <div>${20*o.purpleEggs}</div>\n                        </div>\n                    </div>\n                </div>\n                \n                <div style="display: flex; justify-content: space-between; margin-bottom: 8px; font-size: 12px;">\n                    <div style="flex: 1; background-color: rgba(155, 89, 182, 0.1); padding: 6px; border-radius: 4px; margin-right: 4px;">\n                        <div style="font-weight: bold; color: #9b59b6; margin-bottom: 2px;">Game Time</div>\n                        <div>${o.gameTime} seconds</div>\n                    </div>\n                    <div style="flex: 1; background-color: rgba(231, 76, 60, 0.1); padding: 6px; border-radius: 4px; margin-left: 4px;">\n                        <div style="font-weight: bold; color: #e74c3c; margin-bottom: 2px;">Lives Remaining</div>\n                        <div>${o.lives}</div>\n                    </div>\n                </div>\n                \n                <div style="background-color: rgba(52, 152, 219, 0.05); padding: 6px; border-radius: 4px; margin-bottom: 10px; word-break: break-all; border: 1px dashed #3498db;">\n                    <div style="font-weight: bold; color: #3498db; font-size: 11px; margin-bottom: 2px;">Proof Hash</div>\n                    <div style="font-family: monospace; font-size: 11px; color: #7f8c8d;">${e}</div>\n                </div>\n            `;t.innerHTML=s,i.appendChild(t)}else console.error("proof-log element not found!")},generateProofHash:function(o){return`0xSIM${o.score.toString(16).padStart(4,"0")}${o.yellowEggs.toString(16).padStart(2,"0")}${o.blueEggs.toString(16).padStart(2,"0")}${o.purpleEggs.toString(16).padStart(2,"0")}${Date.now().toString(16).slice(-8)}`}};window.SP1Bridge=SP1Bridge,window.generateSP1Proof=function(o){return SP1Bridge.generateProof(o)},console.log("SP1Bridge loaded - Crab Game ZK integration ready!");